import { ColorResolvable, CommandInteraction, GuildMember, Message, MessageActionRow, MessageActionRowComponent, MessageButton, MessageComponentInteraction, MessageEmbed, MessageOptions, MessageSelectMenu } from 'discord.js';
import { Action, ActionUnion, Button, EndMethod, EndMethodUnion, IAutoGeneratePagesOptions, IResetListenTimeoutOptions, ITrigger, Page } from './interfaces';
import { APIMessage } from 'discord-api-types/v9';
declare type Files = Exclude<MessageOptions['files'], undefined>;
export declare class PagesBuilder extends MessageEmbed {
    /**
     * Common
     */
    readonly interaction: CommandInteraction;
    private collector;
    private messageComponent?;
    private message;
    private messageId;
    private buildMethod;
    /**
     * Pages
     */
    private pages;
    private files;
    private currentPage;
    private paginationFormat;
    private loop;
    /**
     * Components
     */
    protected components: MessageActionRow[];
    private defaultButtons;
    /**
     * Listen
     */
    private listenTimeout;
    private listenUsers;
    private timeout;
    private autoResetTimeout;
    private endColor;
    private endMethod;
    /**
     * Triggers
     */
    private triggers;
    constructor(interaction: CommandInteraction);
    /**
     * Method for initial pages setup
     *
     * @example
     * ```
     * builder.setPages(
     *     new MessageEmbed()
     *         .setTitle('Hello World!')
     * );
     *
     * builder.setPages([
     *     new MessageEmbed()
     *         .setTitle('Hello World!'),
     *     () => (
     *         new MessageEmbed()
     *             .setTitle('Function page')
     *     )
     * ]);
     * ```
     */
    setPages(pages: Page | Page[]): this;
    /**
     * Method for adding pages to the end
     */
    addPages(pages: Page | Page[]): this;
    /**
     * Method for initial files setup
     */
    setFiles(files: Files | Files[number]): this;
    /**
     * Method for adding files to the end
     */
    addFiles(files: Files | Files[number]): this;
    /**
     * Method for auto generating pages
     *
     * @example
     * ```
     * builder.autoGeneratePages({
     *     items: [
     *         'Player 1',
     *         'Player 2',
     *         'Player 3'
     *     ],
     *     countPerPage: 2
     * });
     * ```
     */
    autoGeneratePages({ items, countPerPage }: IAutoGeneratePagesOptions): this;
    /**
     * Method for opening a specific page
     */
    setPage(pageNumber: number): Promise<ReturnType<Message['edit']> | ReturnType<CommandInteraction['editReply']> | ReturnType<MessageComponentInteraction['editReply']> | ReturnType<MessageComponentInteraction['update']>>;
    /**
     * Method for getting the page
     */
    getPage(pageNumber?: number): Promise<MessageEmbed[]>;
    /**
     * Method for setting the pagination format
     *
     * @example
     * %c - Current page
     * %m - Max page
     *
     * ```
     * builder.setPaginationFormat('Current page: %c, Max: %m');
     * ```
     */
    setPaginationFormat(format?: string): this;
    /**
     * Method for setting endless page switching when reaching the end
     */
    setLoop(status?: boolean): this;
    /**
     * Method for setting default buttons
     *
     * @example
     * ```
     * builder.setDefaultButtons(['first', {
     *   stop: new MessageButton()
     *      .setLabel('Stop')
     *      .setStyle('PRIMARY')
     * }]);
     * ```
     */
    setDefaultButtons(buttons?: Button[]): this;
    /**
     * Method for setting the time to listen for updates to switch pages
     */
    setListenTimeout(timeout?: number): this;
    /**
     * @description Method for resetting the current listening timer
     */
    resetListenTimeout({ isFirstBuild }?: IResetListenTimeoutOptions): void;
    /**
     * Method for setting embed color at the end of listening
     */
    setListenEndColor(color?: ColorResolvable): this;
    /**
     * Method for setting the method of working with a message when you finish listening for reactions
     */
    setListenEndMethod(method: EndMethod | EndMethodUnion): this;
    /**
     * Method for setting listening to specific users
     */
    setListenUsers(users?: GuildMember['id'] | GuildMember['id'][]): this;
    /**
     * Method for adding listening to specific users
     */
    addListenUsers(users: GuildMember['id'] | GuildMember['id'][]): this;
    /**
     * Method for setting the timer to automatically reset when switching between pages
     */
    setAutoResetTimeout(status?: boolean): this;
    /**
     * Method for early stopping listening
     */
    stopListen(): void;
    /**
     * Method for setting components rows
     */
    setComponents(components: MessageActionRow | MessageActionRow[]): this;
    /**
     * Method for adding components to available row
     */
    addComponents(components: MessageActionRow | MessageActionRowComponent | (MessageActionRow | MessageActionRowComponent)[]): this;
    /**
     * Method for update existing components
     *
     * @example
     * ```
     * const button = new MessageButton()
     *    .setCustomId('test')
     *    .setLabel('Test button')
     *    .setStyle('PRIMARY');
     *
     * builder.addComponents(button);
     *
     * button.setLabel('Primary button');
     *
     * builder.updateComponents(button);
     *
     * builder.rerender();
     * ```
     */
    updateComponents(components: MessageActionRowComponent | MessageActionRowComponent[]): this;
    get appendedComponents(): PagesBuilder['components'];
    /**
     * Method for initial setting of triggers
     */
    setTriggers<T extends MessageButton | MessageSelectMenu>(triggers?: ITrigger<T> | ITrigger<T>[]): this;
    /**
     * Method for adding triggers
     */
    addTriggers<T extends MessageButton | MessageSelectMenu>(triggers: ITrigger<T> | ITrigger<T>[]): this;
    /**
     * Rerender current page
     */
    rerender(): Promise<any>;
    /**
     * Build method
     */
    build(): Promise<void | Message | APIMessage>;
    /**
     * @hidden
     */
    private simplifyKeyboard;
    /**
     * @hidden
     */
    private startCollector;
    /**
     * @hidden
     */
    private handleButton;
    /**
     * @hidden
     */
    private handleSelectMenu;
    /**
     * Method for invoking quick actions
     */
    executeAction(action: Action | ActionUnion | string): void;
}
export {};
